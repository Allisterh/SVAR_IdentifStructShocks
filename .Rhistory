exp(-1)
install.packages("devtools")
library(devtools)
install_github("jrenne/AEC")
library(AEC)
sign.restrictions <- list()
SR.restrictions <- list()
horizon <- list()
#Define sign restrictions and horizon for restrictions
for(i in 1:n){
sign.restrictions[[i]] <- matrix(0,n,n)
horizon[[i]] <- 1
}
n <- length(considered.variables)
data("USmonthly")
First.date <- "1965-01-01"
Last.date <- "1995-06-01"
indic.first <- which(USmonthly$DATES==First.date)
indic.last  <- which(USmonthly$DATES==Last.date)
USmonthly   <- USmonthly[indic.first:indic.last,]
considered.variables<-c("LIP","UNEMP","LCPI","LPCOM","FFR","NBR","TTR","M1")
n <- length(considered.variables)
y <- as.matrix(USmonthly[considered.variables])
sign.restrictions <- list()
SR.restrictions <- list()
horizon <- list()
#Define sign restrictions and horizon for restrictions
for(i in 1:n){
sign.restrictions[[i]] <- matrix(0,n,n)
horizon[[i]] <- 1
}
sign.restrictions[[1]][1,6] <- 1
sign.restrictions[[2]][1,7] <- 1
sign.restrictions[[3]][1,1] <- 1
sign.restrictions[[3]][2,5] <- 1
sign.restrictions[[4]][1,2] <- -1
sign.restrictions[[4]][2,5] <- 1
sign.restrictions[[5]][1,3] <- 1
sign.restrictions[[5]][2,5] <- 1
sign.restrictions[[6]][1,5] <- -1
sign.restrictions[[6]][2,3] <- 1
sign.restrictions[[6]][3,6] <- 1
horizon[[6]] <- 1:5
#Define zero restrictions
SR.restrictions[[1]] <- array(0,c(1,n))
SR.restrictions[[1]][1,5] <- 1
SR.restrictions[[2]] <- array(0,c(1,n))
SR.restrictions[[2]][1,5] <- 1
for(i in 3:n){
SR.restrictions[[i]] <- array(0,c(0,n))
}
res.svar.signs.zeros <- svar.signs(y,p=3,
nb.shocks = 6, #number of identified shocks
nb.periods.IRF = 20,
bootstrap.replications = 100, # = 0 or 1
confidence.interval = 0.90, # expressed in pp.
indic.plot = 1, # Plots are displayed if = 1.
nb.draws = 10000, # number of draws
sign.restrictions,
horizon,
recursive =0,
SR.restrictions)
library(AEC)
distri <- list(type=c("gaussian","gaussian"),df=c(4,4))
n <- length(distri$type) # dimension of y_t
nb.sim <- 30
eps <- simul.distri(distri,nb.sim)
Phi <- array(NaN,c(n,n,1))
Phi[,,1] <- matrix(c(.5,-.4,.3,.7),2,2)
p <- dim(Phi)[3]
Theta <- array(NaN,c(n,n,1))
Theta[,,1] <- -matrix(c(2,1,0,.5),2,2)
q <- dim(Theta)[3]
Mu <- rep(0,n)
C <- matrix(c(1,-1,2,1),2,2)
Model <- list(
Mu = Mu,Phi = Phi,Theta = Theta,C = C,distri = distri)
Y0 <- rep(0,n)
eta0 <- c(1,0)
res.sim.1 <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
eta0 <- c(0,1)
res.sim.2 <- simul.VARMA(Model,nb.sim,Y0,eta0,indic.IRF=1)
par(plt=c(.15,.95,.25,.8))
par(mfrow=c(2,2))
plot(res.sim.1$Y[1,],las=1,
type="l",lwd=3,xlab="",ylab="",
main=expression(paste("Response of ",y[1,"*,*",t],
" to a one-unit increase in ",eta[1],sep="")))
abline(h=0,col="grey",lty=3)
plot(res.sim.2$Y[1,],las=1,
type="l",lwd=3,xlab="",ylab="",
main=expression(paste("Response of ",y[1,"*,*",t],
" to a one-unit increase in ",eta[2],sep="")))
abline(h=0,col="grey",lty=3)
plot(res.sim.1$Y[2,],las=1,
type="l",lwd=3,xlab="",ylab="",
main=expression(paste("Response of ",y[2,"*,*",t],
" to a one-unit increase in ",eta[1],sep="")))
abline(h=0,col="grey",lty=3)
plot(res.sim.2$Y[2,],las=1,
type="l",lwd=3,xlab="",ylab="",
main=expression(paste("Response of ",y[2,"*,*",t],
" to a one-unit increase in ",eta[2],sep="")))
abline(h=0,col="grey",lty=3)
svar.signs
svar.signs
library(devtools)
install_github("jrenne/IdSS")
install_github("jrenne/IdSS")
install_github("jrenne/IdSS")
install_github("jrenne/IdSS")
install_github("jrenne/IdSS")
